// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pb/itemssvc/v1/itemssvc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemSvcClient is the client API for ItemSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemSvcClient interface {
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type itemSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewItemSvcClient(cc grpc.ClientConnInterface) ItemSvcClient {
	return &itemSvcClient{cc}
}

func (c *itemSvcClient) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error) {
	out := new(CreateItemResponse)
	err := c.cc.Invoke(ctx, "/pb.itemsvc.v1.ItemSvc/CreateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemSvcClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/pb.itemsvc.v1.ItemSvc/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemSvcServer is the server API for ItemSvc service.
// All implementations must embed UnimplementedItemSvcServer
// for forward compatibility
type ItemSvcServer interface {
	CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedItemSvcServer()
}

// UnimplementedItemSvcServer must be embedded to have forward compatible implementations.
type UnimplementedItemSvcServer struct {
}

func (UnimplementedItemSvcServer) CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedItemSvcServer) DeleteItem(context.Context, *DeleteItemRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedItemSvcServer) mustEmbedUnimplementedItemSvcServer() {}

// UnsafeItemSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemSvcServer will
// result in compilation errors.
type UnsafeItemSvcServer interface {
	mustEmbedUnimplementedItemSvcServer()
}

func RegisterItemSvcServer(s grpc.ServiceRegistrar, srv ItemSvcServer) {
	s.RegisterService(&ItemSvc_ServiceDesc, srv)
}

func _ItemSvc_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemSvcServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.itemsvc.v1.ItemSvc/CreateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemSvcServer).CreateItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemSvc_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemSvcServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.itemsvc.v1.ItemSvc/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemSvcServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemSvc_ServiceDesc is the grpc.ServiceDesc for ItemSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.itemsvc.v1.ItemSvc",
	HandlerType: (*ItemSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _ItemSvc_CreateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _ItemSvc_DeleteItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/itemssvc/v1/itemssvc.proto",
}
